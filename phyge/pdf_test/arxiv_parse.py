import urllib.request
import xml.etree.ElementTree as ET
import filetype
import re
import os
import copy
import pdb
def namespace(element):
    m = re.match('\{.*\}', element.tag)
    return m.group(0) if m else ''


def request(cat_tag='astro-ph',art_num = 10): #look for arxiv category tags here: https://arxiv.org/help/api/user-manual#paging (Subject Classifications)
    # cat_tag - category tag of article at arxiv.org
    # art_num - maximum number of articles to retrieve
    # returns list of dicts, each dict contains title, abstract, and pdf url of article
    #pdb.set_trace()
    req_url = 'http://export.arxiv.org/api/query?search_query=cat:'+cat_tag+'&start=0&max_results='+str(art_num)
    data = urllib.request.urlopen(req_url).read().decode('utf-8')
    root = ET.fromstring(data)
    ns = {'name':namespace(root)[1:-1]}
    entries = root.findall('name:entry',ns)
    articles = []
    for entry in entries:
        articles.append({'title':entry.find("name:title",ns).text,
        'abstract':entry.find("name:summary",ns).text,
        'pdf_url':entry.find("name:link[@title='pdf']",ns).attrib['href']})
    return articles

def load(save_pth,art_list): #also checks if downloaded file is actually pdf, and deletes file if it's not pdf
    # save_pth - path to save articles to
    # art_list - list of articles to download (generated by request)
    # returns loc_arts - local copy of art_list with removed entries (entry is removed if leads to non pdf file)
    loc_arts = copy.copy(art_list) # local copy of list of articles
    false_pdf = []
    for i in range(len(loc_arts)):
        filename = loc_arts[i]['pdf_url'].split('/')[-1]+'.pdf'
        urllib.request.urlretrieve(loc_arts[i]['pdf_url'],save_pth + filename)
        print('Downloaded {}/{} articles ...'.format(i+1,len(loc_arts)))
        if not filetype.guess(save_pth + filename):
            print('File {} removed (not pdf)'.format(filename))
            os.remove(save_pth + filename)
            false_pdf.append(i)
    for elem in false_pdf:
        del loc_arts[elem]
    print('Number of successfully downloaded articles: {}'.format(len(loc_arts)))
    return loc_arts

if __name__ == '__main__':
    load('',request('astro-ph',10))